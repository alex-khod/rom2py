from src.formats.autogenerated.rage_of_mages_2_data_bin import RageOfMages2DataBin

class ReprMeta:
    
    def __repr__(self):
        return f"<{self.__class__}> {self.name}"

__metaclass__ = ReprMeta

class DataBin(RageOfMages2DataBin):
    
    def __init__(self, _io, _parent=None, _root=None):
        super().__init__(_io, _parent, _root)
        self.monsters = [m.body for m in self.monster_headers if m.field_count]
        self.humans = [m.body for m in self.human_headers if m.field_count]
        self.spells = [m.body for m in self.spell_headers if m.field_count]        
        self.monsters_by_name = {m.name.lower() : m for m in self.monsters}
        self.monsters_by_type_id = {m.type_id : m for m in self.monsters}
        self.spells_by_name = {m.name.lower() : m for m in self.spells}
    
    def __repr__(self):
        attrnames = ['name', 'id', 'type_id']
        attrs = ''
        for attrname in attrnames:            
            attrs += f"{attrname}: {getattr(self, attrname)}, " if hasattr(self, attrname) else ''
        addr = hex(id(self))
        return f"{attrs}{type(self)} at {addr}"

def u1str_to_str(cls, *args, **kwargs):
    inst = super(cls, cls).__new__(cls)
    inst.__init__(*args, **kwargs)
    return inst.value

# DataBin.U1str.__repr__ = lambda x: x.value if x.value else "<empty U1str>"
RageOfMages2DataBin.U1str.__new__ = u1str_to_str
DataBin.TMonster.__repr__ = DataBin.__repr__
DataBin.THuman.__repr__ = DataBin.__repr__
DataBin.TSpell.__repr__ = DataBin.__repr__
            